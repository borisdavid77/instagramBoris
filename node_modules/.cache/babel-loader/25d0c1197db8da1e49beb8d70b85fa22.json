{"ast":null,"code":"/* eslint-disable no-unused-vars */\n\n/* eslint-disable no-nested-ternary */\nimport { firebase, arrayUnion, arrayRemove } from \"../lib/firebase\";\nimport \"firebase/compat/firestore\";\nexport async function doesUsernameExists(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.length > 0;\n}\nexport async function getUserByUsername(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n}\nexport async function getUserPhotosByUsername(username) {\n  const [user] = await getUserByUsername(username);\n  const result = await firestore.firestore().collection(\"photos\").where(\"userId\", \"==\", \"user.uid\").get();\n  const photos = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n} // get user from the firestore where userId === userId (passed from the auth)\n\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", userId).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user;\n} // check all conditions before limit results\n\nexport async function getSuggestedProfiles(userId, following) {\n  let query = firebase.firestore().collection(\"users\");\n\n  if (following.length > 0) {\n    query = query.where(\"userId\", \"not-in\", [...following, userId]);\n  } else {\n    query = query.where(\"userId\", \"!=\", userId);\n  }\n\n  const result = await query.limit(10).get();\n  const profiles = result.docs.map(user => ({ ...user.data(),\n    docId: user.id\n  }));\n  return profiles;\n}\nexport async function updateLoggedInUserFollowing(loggedInUserDocId, // currently logged in user document id (karl's profile)\nprofileId, // the user that karl requests to follow\nisFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase.firestore().collection(\"users\").doc(loggedInUserDocId).update({\n    following: isFollowingProfile ? arrayRemove(profileId) : arrayUnion(profileId)\n  });\n}\nexport async function updateFollowedUserFollowers(profileDocId, // currently logged in user document id (karl's profile)\nloggedInUserDocId, // the user that karl requests to follow\nisFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase.firestore().collection(\"users\").doc(profileDocId).update({\n    followers: isFollowingProfile ? arrayRemove(loggedInUserDocId) : arrayUnion(loggedInUserDocId)\n  });\n}\nexport async function getPhotos(userId, following) {\n  // [5,4,2] => following\n  const result = await firebase.firestore().collection(\"photos\").where(\"userId\", \"in\", following).get();\n  const userFollowedPhotos = result.docs.map(photo => ({ ...photo.data(),\n    docId: photo.id\n  }));\n  const photosWithUserDetails = await Promise.all(userFollowedPhotos.map(async photo => {\n    let userLikedPhoto = false;\n\n    if (photo.likes.includes(userId)) {\n      userLikedPhoto = true;\n    } // photo.userId = 2\n\n\n    const user = await getUserByUserId(photo.userId); // raphael\n\n    const {\n      username\n    } = user[0];\n    return {\n      username,\n      ...photo,\n      userLikedPhoto\n    };\n  }));\n  return photosWithUserDetails;\n}","map":{"version":3,"sources":["D:/CURSO JS/REACT/instagram/src/services/firebase.js"],"names":["firebase","arrayUnion","arrayRemove","doesUsernameExists","username","result","firestore","collection","where","get","docs","length","getUserByUsername","map","item","data","docId","id","getUserPhotosByUsername","user","photos","getUserByUserId","userId","getSuggestedProfiles","following","query","limit","profiles","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","doc","update","updateFollowedUserFollowers","profileDocId","followers","getPhotos","userFollowedPhotos","photo","photosWithUserDetails","Promise","all","userLikedPhoto","likes","includes"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-nested-ternary */\r\n\r\nimport { firebase, arrayUnion, arrayRemove } from \"../lib/firebase\";\r\nimport \"firebase/compat/firestore\";\r\n\r\nexport async function doesUsernameExists(username) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"username\", \"==\", username)\r\n    .get();\r\n\r\n  return result.docs.length > 0;\r\n}\r\nexport async function getUserByUsername(username) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"username\", \"==\", username)\r\n    .get();\r\n\r\n  return result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n}\r\n\r\nexport async function getUserPhotosByUsername(username) {\r\n  const [user] = await getUserByUsername(username);\r\n  const result = await firestore\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .where(\"userId\", \"==\", \"user.uid\")\r\n    .get();\r\n  const photos = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n}\r\n// get user from the firestore where userId === userId (passed from the auth)\r\nexport async function getUserByUserId(userId) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"userId\", \"==\", userId)\r\n    .get();\r\n  const user = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n\r\n  return user;\r\n}\r\n\r\n// check all conditions before limit results\r\nexport async function getSuggestedProfiles(userId, following) {\r\n  let query = firebase.firestore().collection(\"users\");\r\n\r\n  if (following.length > 0) {\r\n    query = query.where(\"userId\", \"not-in\", [...following, userId]);\r\n  } else {\r\n    query = query.where(\"userId\", \"!=\", userId);\r\n  }\r\n  const result = await query.limit(10).get();\r\n\r\n  const profiles = result.docs.map((user) => ({\r\n    ...user.data(),\r\n    docId: user.id,\r\n  }));\r\n\r\n  return profiles;\r\n}\r\n\r\nexport async function updateLoggedInUserFollowing(\r\n  loggedInUserDocId, // currently logged in user document id (karl's profile)\r\n  profileId, // the user that karl requests to follow\r\n  isFollowingProfile // true/false (am i currently following this person?)\r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .doc(loggedInUserDocId)\r\n    .update({\r\n      following: isFollowingProfile\r\n        ? arrayRemove(profileId)\r\n        : arrayUnion(profileId),\r\n    });\r\n}\r\n\r\nexport async function updateFollowedUserFollowers(\r\n  profileDocId, // currently logged in user document id (karl's profile)\r\n  loggedInUserDocId, // the user that karl requests to follow\r\n  isFollowingProfile // true/false (am i currently following this person?)\r\n) {\r\n  return firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .doc(profileDocId)\r\n    .update({\r\n      followers: isFollowingProfile\r\n        ? arrayRemove(loggedInUserDocId)\r\n        : arrayUnion(loggedInUserDocId),\r\n    });\r\n}\r\n\r\nexport async function getPhotos(userId, following) {\r\n  // [5,4,2] => following\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"photos\")\r\n    .where(\"userId\", \"in\", following)\r\n    .get();\r\n\r\n  const userFollowedPhotos = result.docs.map((photo) => ({\r\n    ...photo.data(),\r\n    docId: photo.id,\r\n  }));\r\n\r\n  const photosWithUserDetails = await Promise.all(\r\n    userFollowedPhotos.map(async (photo) => {\r\n      let userLikedPhoto = false;\r\n      if (photo.likes.includes(userId)) {\r\n        userLikedPhoto = true;\r\n      }\r\n      // photo.userId = 2\r\n      const user = await getUserByUserId(photo.userId);\r\n      // raphael\r\n      const { username } = user[0];\r\n      return { username, ...photo, userLikedPhoto };\r\n    })\r\n  );\r\n\r\n  return photosWithUserDetails;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}