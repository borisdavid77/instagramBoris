{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable no-unused-vars */\nimport { useState, useEffect, useContext } from \"react\";\nimport { firebase } from \"../lib/firebase\";\nimport FirebaseContext from \"../context/firebase\";\nexport default function useAuthListener() {\n  _s();\n\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem(\"authUser\")));\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  useEffect(() => {\n    const listener = firebase.auth().onAuthStateChanged(authUser => {\n      if (authUser) {\n        // we have a user...therefore we can store the user in localstorage\n        localStorage.setItem(\"authUser\", JSON.stringify(authUser));\n        setUser(authUser);\n      } else {\n        // we don't have an authUser, therefore clear the localstorage\n        localStorage.removeItem(\"authUser\");\n        setUser(null);\n      }\n    });\n    return () => listener();\n  }, [firebase]);\n  return {\n    user\n  };\n}\n\n_s(useAuthListener, \"QbeyeTuXls5DL/c+0Dx9k4nXk5Y=\");","map":{"version":3,"sources":["D:/CURSO JS/REACT/instagram/src/hooks/use-auth-listener.js"],"names":["useState","useEffect","useContext","firebase","FirebaseContext","useAuthListener","user","setUser","JSON","parse","localStorage","getItem","listener","auth","onAuthStateChanged","authUser","setItem","stringify","removeItem"],"mappings":";;AAAA;;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAC9BQ,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAD8B,CAAhC;AAGA,QAAM;AAAER,IAAAA;AAAF,MAAeD,UAAU,CAACE,eAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,QAAQ,GAAGT,QAAQ,CAACU,IAAT,GAAgBC,kBAAhB,CAAoCC,QAAD,IAAc;AAChE,UAAIA,QAAJ,EAAc;AACZ;AACAL,QAAAA,YAAY,CAACM,OAAb,CAAqB,UAArB,EAAiCR,IAAI,CAACS,SAAL,CAAeF,QAAf,CAAjC;AACAR,QAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,OAJD,MAIO;AACL;AACAL,QAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAX,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KAVgB,CAAjB;AAYA,WAAO,MAAMK,QAAQ,EAArB;AACD,GAdQ,EAcN,CAACT,QAAD,CAdM,CAAT;AAgBA,SAAO;AAAEG,IAAAA;AAAF,GAAP;AACD;;GAvBuBD,e","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable no-unused-vars */\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { firebase } from \"../lib/firebase\";\r\nimport FirebaseContext from \"../context/firebase\";\r\n\r\nexport default function useAuthListener() {\r\n  const [user, setUser] = useState(\r\n    JSON.parse(localStorage.getItem(\"authUser\"))\r\n  );\r\n  const { firebase } = useContext(FirebaseContext);\r\n\r\n  useEffect(() => {\r\n    const listener = firebase.auth().onAuthStateChanged((authUser) => {\r\n      if (authUser) {\r\n        // we have a user...therefore we can store the user in localstorage\r\n        localStorage.setItem(\"authUser\", JSON.stringify(authUser));\r\n        setUser(authUser);\r\n      } else {\r\n        // we don't have an authUser, therefore clear the localstorage\r\n        localStorage.removeItem(\"authUser\");\r\n        setUser(null);\r\n      }\r\n    });\r\n\r\n    return () => listener();\r\n  }, [firebase]);\r\n\r\n  return { user };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}