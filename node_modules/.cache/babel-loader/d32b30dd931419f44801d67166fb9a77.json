{"ast":null,"code":"var _jsxFileName = \"D:\\\\CURSO JS\\\\REACT\\\\instagram\\\\src\\\\components\\\\post\\\\add-comment.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/require-default-props */\n\n/* eslint-disable react/forbid-prop-types */\n\n/* eslint-disable no-shadow */\n\n/* eslint-disable no-unused-vars */\nimport React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport FirebaseContext from \"../../context/firebase\";\nimport UserContext from \"../../context/user\";\nimport { firebase, arrayUnion, arrayRemove } from \"../../lib/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddComment(_ref) {\n  _s();\n\n  let {\n    docId,\n    comments,\n    setComments,\n    commentInput\n  } = _ref;\n  const [comment, setComment] = useState(\"\");\n  const {\n    firebase,\n    FieldValue\n  } = useContext(FirebaseContext);\n  const {\n    user: {\n      displayName\n    }\n  } = useContext(UserContext);\n\n  const handleSubmitComment = e => {\n    e.preventDefault();\n    setComments([{\n      displayName,\n      comment\n    }, ...comments]);\n    setComment(\"\"); // give me a new Array[]\n    // put the new comment in there\n    // add the old commment\n    // then we have a new Array with the new comment and the older comments\n\n    return firebase.firestore().collection(\"photos\").doc(docId).update({\n      comments: arrayUnion({\n        displayName,\n        comment\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"border-t border-gray-primary\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex justify-between pl-0 pr-5\",\n      method: \"POST\",\n      onSubmit: event => comment.length >= 1 ? handleSubmitComment(event) : event.preventDefault(),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        \"aria-label\": \"Add a comment\",\n        autoComplete: \"off\",\n        className: \"rounded-lg text-xs text-gray-base w-full mr-3 py-5 px-4\",\n        type: \"text\",\n        name: \"add-comment\",\n        placeholder: \"Add a comment...\",\n        value: comment,\n        onChange: _ref2 => {\n          let {\n            target\n          } = _ref2;\n          return setComment(target.value);\n        },\n        ref: commentInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `text-xs font-bold text-blue-medium ${!comment && \"opacity-25\"}`,\n        type: \"button\",\n        disabled: comment.length < 1,\n        onClick: handleSubmitComment,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddComment, \"ez9czDqAYYPdQteYJa/np16dwQA=\");\n\n_c = AddComment;\nAddComment.propTypes = {\n  docId: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  setComments: PropTypes.func.isRequired,\n  commentInput: PropTypes.object\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AddComment\");","map":{"version":3,"sources":["D:/CURSO JS/REACT/instagram/src/components/post/add-comment.js"],"names":["React","useState","useContext","PropTypes","FirebaseContext","UserContext","firebase","arrayUnion","arrayRemove","AddComment","docId","comments","setComments","commentInput","comment","setComment","FieldValue","user","displayName","handleSubmitComment","e","preventDefault","firestore","collection","doc","update","event","length","target","value","propTypes","string","isRequired","array","func","object"],"mappings":"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","sourcesContent":["/* eslint-disable react/require-default-props */\r\n/* eslint-disable react/forbid-prop-types */\r\n/* eslint-disable no-shadow */\r\n/* eslint-disable no-unused-vars */\r\n\r\nimport React, { useState, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FirebaseContext from \"../../context/firebase\";\r\nimport UserContext from \"../../context/user\";\r\nimport { firebase, arrayUnion, arrayRemove } from \"../../lib/firebase\";\r\n\r\nexport default function AddComment({\r\n  docId,\r\n  comments,\r\n  setComments,\r\n  commentInput,\r\n}) {\r\n  const [comment, setComment] = useState(\"\");\r\n  const { firebase, FieldValue } = useContext(FirebaseContext);\r\n  const {\r\n    user: { displayName },\r\n  } = useContext(UserContext);\r\n\r\n  const handleSubmitComment = (e) => {\r\n    e.preventDefault();\r\n    setComments([{ displayName, comment }, ...comments]);\r\n    setComment(\"\");\r\n    // give me a new Array[]\r\n    // put the new comment in there\r\n    // add the old commment\r\n    // then we have a new Array with the new comment and the older comments\r\n    return firebase\r\n      .firestore()\r\n      .collection(\"photos\")\r\n      .doc(docId)\r\n      .update({ comments: arrayUnion({ displayName, comment }) });\r\n  };\r\n  return (\r\n    <div className=\"border-t border-gray-primary\">\r\n      <form\r\n        className=\"flex justify-between pl-0 pr-5\"\r\n        method=\"POST\"\r\n        onSubmit={(event) =>\r\n          comment.length >= 1\r\n            ? handleSubmitComment(event)\r\n            : event.preventDefault()\r\n        }\r\n      >\r\n        <input\r\n          aria-label=\"Add a comment\"\r\n          autoComplete=\"off\"\r\n          className=\"rounded-lg text-xs text-gray-base w-full mr-3 py-5 px-4\"\r\n          type=\"text\"\r\n          name=\"add-comment\"\r\n          placeholder=\"Add a comment...\"\r\n          value={comment}\r\n          onChange={({ target }) => setComment(target.value)}\r\n          ref={commentInput}\r\n        />\r\n        <button\r\n          className={`text-xs font-bold text-blue-medium ${\r\n            !comment && \"opacity-25\"\r\n          }`}\r\n          type=\"button\"\r\n          disabled={comment.length < 1}\r\n          onClick={handleSubmitComment}\r\n        >\r\n          Post\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nAddComment.propTypes = {\r\n  docId: PropTypes.string.isRequired,\r\n  comments: PropTypes.array.isRequired,\r\n  setComments: PropTypes.func.isRequired,\r\n  commentInput: PropTypes.object,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}