{"ast":null,"code":"/* eslint-disable import/prefer-default-export */\n\n/* eslint-disable no-unused-vars */\nimport { firebase } from \"../lib/firebase\";\nimport \"firebase/compat/firestore\";\nexport async function doesUsernameExists(username) {\n  const result = await firebase.firestore().collection(\"users\").where(\"username\", \"==\", username).get();\n  return result.docs.length > 0;\n} // get user from the firestore where userId === userId (passed from the auth)\n\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection(\"users\").where(\"userId\", \"==\", userId).get();\n  const user = result.docs.map(item => ({ ...item.data(),\n    docId: item.id\n  }));\n  return user;\n} // check all conditions before limit results\n\nexport async function getSuggestedProfiles(userId, following) {\n  let query = firebase.firestore().collection(\"users\");\n\n  if (following.length > 0) {\n    query = query.where(\"userId\", \"not-in\", [...following, userId]);\n  } else {\n    query = query.where(\"userId\", \"!=\", userId);\n  }\n\n  const result = await query.limit(10).get();\n  const profiles = result.docs.map(user => ({ ...user.data(),\n    docId: user.id\n  }));\n  return profiles;\n}","map":{"version":3,"sources":["D:/CURSO JS/REACT/instagram/src/services/firebase.js"],"names":["firebase","doesUsernameExists","username","result","firestore","collection","where","get","docs","length","getUserByUserId","userId","user","map","item","data","docId","id","getSuggestedProfiles","following","query","limit","profiles"],"mappings":"AAAA;;AACA;AACA,SAASA,QAAT,QAAyB,iBAAzB;AACA,OAAO,2BAAP;AAEA,OAAO,eAAeC,kBAAf,CAAkCC,QAAlC,EAA4C;AACjD,QAAMC,MAAM,GAAG,MAAMH,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,UAHY,EAGA,IAHA,EAGMJ,QAHN,EAIlBK,GAJkB,EAArB;AAMA,SAAOJ,MAAM,CAACK,IAAP,CAAYC,MAAZ,GAAqB,CAA5B;AACD,C,CACD;;AACA,OAAO,eAAeC,eAAf,CAA+BC,MAA/B,EAAuC;AAC5C,QAAMR,MAAM,GAAG,MAAMH,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,QAHY,EAGF,IAHE,EAGIK,MAHJ,EAIlBJ,GAJkB,EAArB;AAKA,QAAMK,IAAI,GAAGT,MAAM,CAACK,IAAP,CAAYK,GAAZ,CAAiBC,IAAD,KAAW,EACtC,GAAGA,IAAI,CAACC,IAAL,EADmC;AAEtCC,IAAAA,KAAK,EAAEF,IAAI,CAACG;AAF0B,GAAX,CAAhB,CAAb;AAKA,SAAOL,IAAP;AACD,C,CAED;;AACA,OAAO,eAAeM,oBAAf,CAAoCP,MAApC,EAA4CQ,SAA5C,EAAuD;AAC5D,MAAIC,KAAK,GAAGpB,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,CAAZ;;AAEA,MAAIc,SAAS,CAACV,MAAV,GAAmB,CAAvB,EAA0B;AACxBW,IAAAA,KAAK,GAAGA,KAAK,CAACd,KAAN,CAAY,QAAZ,EAAsB,QAAtB,EAAgC,CAAC,GAAGa,SAAJ,EAAeR,MAAf,CAAhC,CAAR;AACD,GAFD,MAEO;AACLS,IAAAA,KAAK,GAAGA,KAAK,CAACd,KAAN,CAAY,QAAZ,EAAsB,IAAtB,EAA4BK,MAA5B,CAAR;AACD;;AACD,QAAMR,MAAM,GAAG,MAAMiB,KAAK,CAACC,KAAN,CAAY,EAAZ,EAAgBd,GAAhB,EAArB;AAEA,QAAMe,QAAQ,GAAGnB,MAAM,CAACK,IAAP,CAAYK,GAAZ,CAAiBD,IAAD,KAAW,EAC1C,GAAGA,IAAI,CAACG,IAAL,EADuC;AAE1CC,IAAAA,KAAK,EAAEJ,IAAI,CAACK;AAF8B,GAAX,CAAhB,CAAjB;AAKA,SAAOK,QAAP;AACD","sourcesContent":["/* eslint-disable import/prefer-default-export */\r\n/* eslint-disable no-unused-vars */\r\nimport { firebase } from \"../lib/firebase\";\r\nimport \"firebase/compat/firestore\";\r\n\r\nexport async function doesUsernameExists(username) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"username\", \"==\", username)\r\n    .get();\r\n\r\n  return result.docs.length > 0;\r\n}\r\n// get user from the firestore where userId === userId (passed from the auth)\r\nexport async function getUserByUserId(userId) {\r\n  const result = await firebase\r\n    .firestore()\r\n    .collection(\"users\")\r\n    .where(\"userId\", \"==\", userId)\r\n    .get();\r\n  const user = result.docs.map((item) => ({\r\n    ...item.data(),\r\n    docId: item.id,\r\n  }));\r\n\r\n  return user;\r\n}\r\n\r\n// check all conditions before limit results\r\nexport async function getSuggestedProfiles(userId, following) {\r\n  let query = firebase.firestore().collection(\"users\");\r\n\r\n  if (following.length > 0) {\r\n    query = query.where(\"userId\", \"not-in\", [...following, userId]);\r\n  } else {\r\n    query = query.where(\"userId\", \"!=\", userId);\r\n  }\r\n  const result = await query.limit(10).get();\r\n\r\n  const profiles = result.docs.map((user) => ({\r\n    ...user.data(),\r\n    docId: user.id,\r\n  }));\r\n\r\n  return profiles;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}